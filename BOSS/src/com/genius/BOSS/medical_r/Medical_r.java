/*
*Generated by GeniusPlatform. 2016-05-06 10:03:56
*/
package com.genius.BOSS.medical_r;

import java.io.IOException;
import java.sql.*;
import java.util.*;

import org.springframework.context.ApplicationContext;
import org.springframework.context.support.ClassPathXmlApplicationContext;

import org.apache.poi.hssf.usermodel.*;
import org.genius.data.*;
import org.genius.util.*;
import org.genius.power.Permission;

import com.lowagie.text.*;
import com.lowagie.text.pdf.BaseFont;
import com.genius.BOSS.medical_r.actionbean.*;

public class Medical_r implements IMedical_r {

	public int totalSize;
	
	public int totalPageCount;

	public String selectSql;
	
	private String selectSumSql;
	
	private String sId;
	
	private final int pagerMaxSize = 200;
	
	public int getTotalSize() {
		return totalSize;
	}

	public void setTotalSize(int totalSize) {
		this.totalSize = totalSize;
	}
	
	public int getTotalPageCount(){
		return totalPageCount;
	}

	public String getSelectSql() {
		return selectSql;
	}

	public void setSelectSql(String selectSql) {
		this.selectSql = selectSql;
	}
	
	public String getSId() {
		return sId;
	}

	public void setSId(String sId) {
		this.sId=sId;
		
	}
	
	
	public ArrayList select(int pageNo, String orderField, String orderType, String searchField,String searchValue,String pager, String filter){
		boolean asc;
		ApplicationContext context = new ClassPathXmlApplicationContext(
				"applicationContext.xml");
		IPageDataConfig myData = (IPageDataConfig) context
				.getBean("pageDataConfigProxy");
		if(pager == null || pager.equals("on")){
			myData.init(50, pageNo);
		}else{
			myData.init(pagerMaxSize,pageNo);
		}
		ArrayList<SelectActionBean> myList=new ArrayList<SelectActionBean>();
		try {
			myData.openConnection();
			String sql ="select ID,NAME,SEX,AGE,DISEASE,DISCRIBE,SECTION,CREATE_USER_ID,CREATE_TIME,STATE,RECIEVE_USER_ID,SOLVE_TIME,is_jump_ask from t_case";

			if (filter != null) {
				Permission permission = new Permission();
				sql = permission.filterSql(sql, filter);
			}

			Map<String,String> fieldType = new HashMap<String,String>();
			{
				fieldType.put("searchNone","None");
				fieldType.put("id","string");
				fieldType.put("NAME","string");
				fieldType.put("SEX","string");
				fieldType.put("AGE","string");
				fieldType.put("DISEASE","string");
				fieldType.put("DISCRIBE","string");
				fieldType.put("SECTION","string");
				fieldType.put("CREATE_USER_ID","string");
				fieldType.put("CREATE_TIME","string");
				fieldType.put("STATE","string");
				fieldType.put("RECIEVE_USER_ID","string");
				fieldType.put("SOLVE_TIME","string");
				fieldType.put("is_jump_ask","string");
			}

			
			if (searchField!=null && searchField.equals("ADSsearchADS")) {
				sql = "select * from(" + sql + ") my_table where " + searchValue ;
			}else if (searchField != null && searchValue != null && !searchField.equals("null") && !searchValue.equals("null")) {
				if(fieldType.get(searchField)!="shortdate" && fieldType.get(searchField)!="longdate")
					sql = "select * from(" + sql + ") my_table where " + searchField + " like '%" + searchValue + "%'";
				else
					sql = "select * from(" + sql + ") my_table where convert(varchar(19)," + searchField + ",120) like '%" + searchValue + "%'";
			}

			if(orderField==null||orderField.equals("null")){
				orderField="id";
			}
			if(orderType==null||orderType.equals("null")){
				asc=false;
			}else if(orderType.equals("true")){
				asc=true;
			}else if(orderType.equals("false")){
				asc=false;
			}else{
				asc=false;
			}

			this.selectSumSql=sql;
			if (asc == true) {
				this.selectSql = "select * from(" + sql
						+ ") my_table_order order by  " + orderField + " asc";
			} else {
				this.selectSql = "select * from(" + sql
						+ ") my_table_order order by  " + orderField + " desc";
			}

			ResultSet rs=myData.executeQueryForSqlServer(sql, "id",orderField, asc );
			
			while(rs.next()){
				SelectActionBean medical_rBean=new SelectActionBean();
				
				medical_rBean.setID(rs.getString("id"));
				
				medical_rBean.setNAME(rs.getString("NAME"));
				
				medical_rBean.setSEX(rs.getString("SEX"));
				
				medical_rBean.setAGE(rs.getString("AGE"));
				
				medical_rBean.setDISEASE(rs.getString("DISEASE"));
				
				medical_rBean.setDISCRIBE(rs.getString("DISCRIBE"));
				
				medical_rBean.setSECTION(rs.getString("SECTION"));
				
				medical_rBean.setCREATE_USER_ID(rs.getString("CREATE_USER_ID"));
				
				medical_rBean.setCREATE_TIME(rs.getString("CREATE_TIME"));
				
				medical_rBean.setSTATE(rs.getString("STATE"));
				
				medical_rBean.setRECIEVE_USER_ID(rs.getString("RECIEVE_USER_ID"));
				
				medical_rBean.setSOLVE_TIME(rs.getString("SOLVE_TIME"));
				
				medical_rBean.setIs_jump_ask(rs.getString("is_jump_ask"));
				
				myList.add(medical_rBean);
				medical_rBean=null;
			}
			totalSize = myData.getTotalSize();
			totalPageCount = myData.getTotalPageCount();
			rs.close();
		} catch (SQLException e) {
			e.printStackTrace();
		 }finally{
			myData.closeConnection();
		}
		return myList;
	}
	
	
	public HSSFWorkbook selectExcelSelect() {
        HSSFWorkbook workbook = new HSSFWorkbook();

        HSSFSheet sheet = workbook.createSheet("sheet1");

        ApplicationContext context = new ClassPathXmlApplicationContext(
				"applicationContext.xml");
		IDataConfig config = (IDataConfig) context.getBean("dataConfigProxy");
		config.init();
        try {
            config.openConnection();
            String sql = this.selectSql;
			HSSFRow rowhead = sheet.createRow((short) 0);
						HSSFCell cellhead0 = rowhead.createCell((short) 0);
			cellhead0.setEncoding(HSSFCell.ENCODING_UTF_16);
			cellhead0.setCellValue("id");
			HSSFCell cellhead1 = rowhead.createCell((short) 1);
			cellhead1.setEncoding(HSSFCell.ENCODING_UTF_16);
			cellhead1.setCellValue("姓名");
			HSSFCell cellhead2 = rowhead.createCell((short) 2);
			cellhead2.setEncoding(HSSFCell.ENCODING_UTF_16);
			cellhead2.setCellValue("性别");
			HSSFCell cellhead3 = rowhead.createCell((short) 3);
			cellhead3.setEncoding(HSSFCell.ENCODING_UTF_16);
			cellhead3.setCellValue("年龄");
			HSSFCell cellhead4 = rowhead.createCell((short) 4);
			cellhead4.setEncoding(HSSFCell.ENCODING_UTF_16);
			cellhead4.setCellValue("疾病");
			HSSFCell cellhead5 = rowhead.createCell((short) 5);
			cellhead5.setEncoding(HSSFCell.ENCODING_UTF_16);
			cellhead5.setCellValue("疾病描述");
			HSSFCell cellhead6 = rowhead.createCell((short) 6);
			cellhead6.setEncoding(HSSFCell.ENCODING_UTF_16);
			cellhead6.setCellValue("分科");
			HSSFCell cellhead7 = rowhead.createCell((short) 7);
			cellhead7.setEncoding(HSSFCell.ENCODING_UTF_16);
			cellhead7.setCellValue("创建人");
			HSSFCell cellhead8 = rowhead.createCell((short) 8);
			cellhead8.setEncoding(HSSFCell.ENCODING_UTF_16);
			cellhead8.setCellValue("创建时间");
			HSSFCell cellhead9 = rowhead.createCell((short) 9);
			cellhead9.setEncoding(HSSFCell.ENCODING_UTF_16);
			cellhead9.setCellValue("状态");
			HSSFCell cellhead10 = rowhead.createCell((short) 10);
			cellhead10.setEncoding(HSSFCell.ENCODING_UTF_16);
			cellhead10.setCellValue("接收医生");
			HSSFCell cellhead11 = rowhead.createCell((short) 11);
			cellhead11.setEncoding(HSSFCell.ENCODING_UTF_16);
			cellhead11.setCellValue("解答时间");
			HSSFCell cellhead12 = rowhead.createCell((short) 12);
			cellhead12.setEncoding(HSSFCell.ENCODING_UTF_16);
			cellhead12.setCellValue("越级咨询");

            ResultSet rs = config.executeQuery(sql);
            int i = 1;
            while (rs.next()) {
                HSSFRow row = sheet.createRow((short) i);
							HSSFCell cell0 = row.createCell((short) 0);
				cell0.setEncoding(HSSFCell.ENCODING_UTF_16);
				cell0.setCellValue(rs.getString("id"));
				HSSFCell cell1 = row.createCell((short) 1);
				cell1.setEncoding(HSSFCell.ENCODING_UTF_16);
				cell1.setCellValue(rs.getString("NAME"));
				HSSFCell cell2 = row.createCell((short) 2);
				cell2.setEncoding(HSSFCell.ENCODING_UTF_16);
				cell2.setCellValue(rs.getString("SEX"));
				HSSFCell cell3 = row.createCell((short) 3);
				cell3.setEncoding(HSSFCell.ENCODING_UTF_16);
				cell3.setCellValue(rs.getString("AGE"));
				HSSFCell cell4 = row.createCell((short) 4);
				cell4.setEncoding(HSSFCell.ENCODING_UTF_16);
				cell4.setCellValue(rs.getString("DISEASE"));
				HSSFCell cell5 = row.createCell((short) 5);
				cell5.setEncoding(HSSFCell.ENCODING_UTF_16);
				cell5.setCellValue(rs.getString("DISCRIBE"));
				HSSFCell cell6 = row.createCell((short) 6);
				cell6.setEncoding(HSSFCell.ENCODING_UTF_16);
				cell6.setCellValue(rs.getString("SECTION"));
				HSSFCell cell7 = row.createCell((short) 7);
				cell7.setEncoding(HSSFCell.ENCODING_UTF_16);
				cell7.setCellValue(rs.getString("CREATE_USER_ID"));
				HSSFCell cell8 = row.createCell((short) 8);
				cell8.setEncoding(HSSFCell.ENCODING_UTF_16);
				cell8.setCellValue(rs.getString("CREATE_TIME"));
				HSSFCell cell9 = row.createCell((short) 9);
				cell9.setEncoding(HSSFCell.ENCODING_UTF_16);
				cell9.setCellValue(rs.getString("STATE"));
				HSSFCell cell10 = row.createCell((short) 10);
				cell10.setEncoding(HSSFCell.ENCODING_UTF_16);
				cell10.setCellValue(rs.getString("RECIEVE_USER_ID"));
				HSSFCell cell11 = row.createCell((short) 11);
				cell11.setEncoding(HSSFCell.ENCODING_UTF_16);
				cell11.setCellValue(rs.getString("SOLVE_TIME"));
				HSSFCell cell12 = row.createCell((short) 12);
				cell12.setEncoding(HSSFCell.ENCODING_UTF_16);
				cell12.setCellValue(rs.getString("is_jump_ask"));

                i++;
            }

        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            config.closeConnection();
        }
        return workbook;
    }
    	
	public Table selectPdfSelect() {
        Table table = null;
        ApplicationContext context = new ClassPathXmlApplicationContext(
				"applicationContext.xml");
		IDataConfig config = (IDataConfig) context.getBean("dataConfigProxy");
		config.init();

        try {
            table = new Table(13);
            int width[] = { 7,7,7,7,7,7,7,7,7,7,7,7,7};
            table.setWidths(width);
            table.setWidth(80); 

            //table.setDefaultHorizontalAlignment(Element.ALIGN_LEFT);
            //table.setDefaultVerticalAlignment(Element.ALIGN_MIDDLE);
            table.setAutoFillEmptyCells(true);
            table.setPadding(1);
            table.setSpacing(0);
            //aTable.setDefaultCellBorder(0);
            table.setBorder(0);
            BaseFont bf = BaseFont.createFont("STSong-Light", "UniGB-UCS2-H",
                    false);
            Font font = new Font(bf, 12);

            config.openConnection();
            String sql = this.selectSql;
            ResultSet rs = config.executeQuery(sql);
            int i = 0;
            
			 table.addCell(new Cell(new Phrase("id",font)));

			 table.addCell(new Cell(new Phrase("姓名",font)));

			 table.addCell(new Cell(new Phrase("性别",font)));

			 table.addCell(new Cell(new Phrase("年龄",font)));

			 table.addCell(new Cell(new Phrase("疾病",font)));

			 table.addCell(new Cell(new Phrase("疾病描述",font)));

			 table.addCell(new Cell(new Phrase("分科",font)));

			 table.addCell(new Cell(new Phrase("创建人",font)));

			 table.addCell(new Cell(new Phrase("创建时间",font)));

			 table.addCell(new Cell(new Phrase("状态",font)));

			 table.addCell(new Cell(new Phrase("接收医生",font)));

			 table.addCell(new Cell(new Phrase("解答时间",font)));

			 table.addCell(new Cell(new Phrase("越级咨询",font)));

            while (rs.next()) {
    		
                table.addCell(new Cell(new Phrase(rs.getString("id"), font)));
			
                table.addCell(new Cell(new Phrase(rs.getString("NAME"), font)));
			
                table.addCell(new Cell(new Phrase(rs.getString("SEX"), font)));
			
                table.addCell(new Cell(new Phrase(rs.getString("AGE"), font)));
			
                table.addCell(new Cell(new Phrase(rs.getString("DISEASE"), font)));
			
                table.addCell(new Cell(new Phrase(rs.getString("DISCRIBE"), font)));
			
                table.addCell(new Cell(new Phrase(rs.getString("SECTION"), font)));
			
                table.addCell(new Cell(new Phrase(rs.getString("CREATE_USER_ID"), font)));
			
                table.addCell(new Cell(new Phrase(rs.getString("CREATE_TIME"), font)));
			
                table.addCell(new Cell(new Phrase(rs.getString("STATE"), font)));
			
                table.addCell(new Cell(new Phrase(rs.getString("RECIEVE_USER_ID"), font)));
			
                table.addCell(new Cell(new Phrase(rs.getString("SOLVE_TIME"), font)));
			
                table.addCell(new Cell(new Phrase(rs.getString("is_jump_ask"), font)));
			
                i++;
            }
        } catch (BadElementException e) {

            e.printStackTrace();
        } catch (DocumentException e) {

            e.printStackTrace();
        } catch (IOException e) {

            e.printStackTrace();
        } catch (SQLException e) {

            e.printStackTrace();
        } finally {
            config.closeConnection();
        }

        return table;
    }
    
    	
	public Table selectWordSelect() {
        Table table = null;
        ApplicationContext context = new ClassPathXmlApplicationContext(
				"applicationContext.xml");
		IDataConfig config = (IDataConfig) context.getBean("dataConfigProxy");
		config.init();

        try {
            table = new Table(13);
            int width[] = { 7,7,7,7,7,7,7,7,7,7,7,7,7};
            table.setWidths(width);
            table.setWidth(80); 

            //table.setDefaultHorizontalAlignment(Element.ALIGN_LEFT);
            //table.setDefaultVerticalAlignment(Element.ALIGN_MIDDLE);
            table.setAutoFillEmptyCells(true);
            table.setPadding(1);
            table.setSpacing(0);
            //aTable.setDefaultCellBorder(0);
            table.setBorder(0);
            BaseFont bf = BaseFont.createFont("STSong-Light", "UniGB-UCS2-H",
                    false);
            Font font = new Font(bf, 12);

            config.openConnection();
            String sql = this.selectSql;
            ResultSet rs = config.executeQuery(sql);
            int i = 0;
            
			 table.addCell(new Cell(new Phrase("id",font)));

			 table.addCell(new Cell(new Phrase("姓名",font)));

			 table.addCell(new Cell(new Phrase("性别",font)));

			 table.addCell(new Cell(new Phrase("年龄",font)));

			 table.addCell(new Cell(new Phrase("疾病",font)));

			 table.addCell(new Cell(new Phrase("疾病描述",font)));

			 table.addCell(new Cell(new Phrase("分科",font)));

			 table.addCell(new Cell(new Phrase("创建人",font)));

			 table.addCell(new Cell(new Phrase("创建时间",font)));

			 table.addCell(new Cell(new Phrase("状态",font)));

			 table.addCell(new Cell(new Phrase("接收医生",font)));

			 table.addCell(new Cell(new Phrase("解答时间",font)));

			 table.addCell(new Cell(new Phrase("越级咨询",font)));

            while (rs.next()) {
    		
                table.addCell(new Cell(new Phrase(rs.getString("id"), font)));
			
                table.addCell(new Cell(new Phrase(rs.getString("NAME"), font)));
			
                table.addCell(new Cell(new Phrase(rs.getString("SEX"), font)));
			
                table.addCell(new Cell(new Phrase(rs.getString("AGE"), font)));
			
                table.addCell(new Cell(new Phrase(rs.getString("DISEASE"), font)));
			
                table.addCell(new Cell(new Phrase(rs.getString("DISCRIBE"), font)));
			
                table.addCell(new Cell(new Phrase(rs.getString("SECTION"), font)));
			
                table.addCell(new Cell(new Phrase(rs.getString("CREATE_USER_ID"), font)));
			
                table.addCell(new Cell(new Phrase(rs.getString("CREATE_TIME"), font)));
			
                table.addCell(new Cell(new Phrase(rs.getString("STATE"), font)));
			
                table.addCell(new Cell(new Phrase(rs.getString("RECIEVE_USER_ID"), font)));
			
                table.addCell(new Cell(new Phrase(rs.getString("SOLVE_TIME"), font)));
			
                table.addCell(new Cell(new Phrase(rs.getString("is_jump_ask"), font)));
			
                i++;
            }
        } catch (BadElementException e) {

            e.printStackTrace();
        } catch (DocumentException e) {

            e.printStackTrace();
        } catch (IOException e) {

            e.printStackTrace();
        } catch (SQLException e) {

            e.printStackTrace();
        } finally {
            config.closeConnection();
        }

        return table;
    }
    
    
	public Map<String,String[]> getIndexModelInfo(){
		Map<String,String[]> infoMap = new HashMap<String,String[]>();
		String[] field;
			
		field = new String[]{"ID","id","id","checkbox","string"};	
		infoMap.put("ID",field);
			
		field = new String[]{"NAME","NAME","姓名","link","string"};	
		infoMap.put("NAME",field);
			
		field = new String[]{"SEX","SEX","性别","string","string"};	
		infoMap.put("SEX",field);
			
		field = new String[]{"AGE","AGE","年龄","string","string"};	
		infoMap.put("AGE",field);
			
		field = new String[]{"DISEASE","DISEASE","疾病","string","string"};	
		infoMap.put("DISEASE",field);
			
		field = new String[]{"DISCRIBE","DISCRIBE","疾病描述","string","string"};	
		infoMap.put("DISCRIBE",field);
			
		field = new String[]{"SECTION","SECTION","分科","string","string"};	
		infoMap.put("SECTION",field);
			
		field = new String[]{"CREATE_USER_ID","CREATE_USER_ID","创建人","string","string"};	
		infoMap.put("CREATE_USER_ID",field);
			
		field = new String[]{"CREATE_TIME","CREATE_TIME","创建时间","string","string"};	
		infoMap.put("CREATE_TIME",field);
			
		field = new String[]{"STATE","STATE","状态","string","string"};	
		infoMap.put("STATE",field);
			
		field = new String[]{"RECIEVE_USER_ID","RECIEVE_USER_ID","接收医生","string","string"};	
		infoMap.put("RECIEVE_USER_ID",field);
			
		field = new String[]{"SOLVE_TIME","SOLVE_TIME","解答时间","string","string"};	
		infoMap.put("SOLVE_TIME",field);
			
		field = new String[]{"is_jump_ask","is_jump_ask","越级咨询","string","string"};	
		infoMap.put("is_jump_ask",field);
	
		return infoMap;
	}



	public boolean insertNew(String DISCRIBE,String DISEASE,String case_imgs,String NAME,String RECIEVE_USER_ID,String SECTION,String SOLVE_CONTENT,String AGE,String STATE,String SOLVE_TIME,String CREATE_USER_ID,String is_jump_ask,String SEX,String CREATE_TIME){
		
		boolean result=false;
		ApplicationContext context = new ClassPathXmlApplicationContext(
				"applicationContext.xml");
		IDataConfig myData = (IDataConfig) context.getBean("dataConfigProxy");
		myData.init();
		try {
			myData.openConnection();
			myData.beginTransaction();
			String sql1 ="insert into t_case (NAME,SEX,AGE,DISEASE,DISCRIBE,case_imgs,SECTION,CREATE_USER_ID,CREATE_TIME,STATE,RECIEVE_USER_ID,SOLVE_TIME,SOLVE_CONTENT,is_jump_ask) values ('" + NAME + "','" + SEX + "','" + AGE + "','" + DISEASE + "','" + DISCRIBE + "','" + case_imgs + "','" + SECTION + "','" + CREATE_USER_ID + "','" + CREATE_TIME + "','" + STATE + "','" + RECIEVE_USER_ID + "','" + SOLVE_TIME + "','" + SOLVE_CONTENT + "','" + is_jump_ask + "')";
			myData.addBatch(sql1);

			
			if(myData.commit()){
				result=true;
			}else{
				result=false;
			}
			
			myData.endTransaction();
			
		} catch (SQLException e) {
			e.printStackTrace();
		}finally{
			myData.closeConnection();
		}
		return result;
	}
	
	public boolean insertEdit(String DISCRIBE,String DISEASE,String case_imgs,String NAME,String RECIEVE_USER_ID,String SECTION,String SOLVE_CONTENT,String AGE,String STATE,String SOLVE_TIME,String ID,String CREATE_USER_ID,String is_jump_ask,String SEX,String CREATE_TIME){
		
		boolean result=false;
		ApplicationContext context = new ClassPathXmlApplicationContext(
				"applicationContext.xml");
		IDataConfig myData = (IDataConfig) context.getBean("dataConfigProxy");
		myData.init();
		try {
			myData.openConnection();
			myData.beginTransaction();
			String sql1 ="update t_case set NAME='" + NAME + "',SEX='" + SEX + "',AGE='" + AGE + "',DISEASE='" + DISEASE + "',DISCRIBE='" + DISCRIBE + "',case_imgs='" + case_imgs + "',SECTION='" + SECTION + "',CREATE_USER_ID='" + CREATE_USER_ID + "',CREATE_TIME='" + CREATE_TIME + "',STATE='" + STATE + "',RECIEVE_USER_ID='" + RECIEVE_USER_ID + "',SOLVE_TIME='" + SOLVE_TIME + "',SOLVE_CONTENT='" + SOLVE_CONTENT + "',is_jump_ask='" + is_jump_ask + "' where id='" + ID + "'";
			myData.addBatch(sql1);

			
			if(myData.commit()){
				result=true;
			}else{
				result=false;
			}
			
			myData.endTransaction();
			
		} catch (SQLException e) {
			e.printStackTrace();
		}finally{
			myData.closeConnection();
		}
		return result;
	}
		
	public InsertActionBean insertSelectEdit(String ID) {
		InsertActionBean bean = new InsertActionBean();
        ApplicationContext context = new ClassPathXmlApplicationContext(
				"applicationContext.xml");
		IDataConfig myData = (IDataConfig) context.getBean("dataConfigProxy");
		myData.init();
        try {
            myData.openConnection();
            String sql="select ID,NAME,SEX,AGE,DISEASE,DISCRIBE,case_imgs,SECTION,CREATE_USER_ID,CREATE_TIME,STATE,RECIEVE_USER_ID,SOLVE_TIME,SOLVE_CONTENT,is_jump_ask from t_case where id='" + ID + "';";
            ResultSet rs = myData
                    .executeQuery(sql);
            while (rs.next()) {
				bean.setNAME(rs.getString("NAME"));
				bean.setSEX(rs.getString("SEX"));
				bean.setAGE(rs.getString("AGE"));
				bean.setDISEASE(rs.getString("DISEASE"));
				bean.setDISCRIBE(rs.getString("DISCRIBE"));
				bean.setCase_imgs(rs.getString("case_imgs"));
				bean.setSECTION(rs.getString("SECTION"));
				bean.setCREATE_USER_ID(rs.getString("CREATE_USER_ID"));
				bean.setCREATE_TIME(rs.getString("CREATE_TIME"));
				bean.setSTATE(rs.getString("STATE"));
				bean.setRECIEVE_USER_ID(rs.getString("RECIEVE_USER_ID"));
				bean.setSOLVE_TIME(rs.getString("SOLVE_TIME"));
				bean.setSOLVE_CONTENT(rs.getString("SOLVE_CONTENT"));
				bean.setIs_jump_ask(rs.getString("is_jump_ask"));

            }
        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            myData.closeConnection();
        }
        return bean;
    }
    

	
	public boolean delete(String[] id){
		boolean result=false;
		ApplicationContext context = new ClassPathXmlApplicationContext(
				"applicationContext.xml");
		IDataConfig myData = (IDataConfig) context.getBean("dataConfigProxy");
		myData.init();
		try {
			myData.openConnection();
			myData.beginTransaction();
			for(int i=0;i<id.length;i++){
		
				myData.addBatch("delete from  t_case where  id ='"+id[i]+"'");
		
			}
			
			if(myData.commit()){
				result=true;
			}else{
				result=false;
			}
			
			myData.endTransaction();
			
		} catch (SQLException e) {
			e.printStackTrace();
		}finally{
			myData.closeConnection();
		}
		return result;
	}
	}

