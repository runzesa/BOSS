/*
*Generated by GeniusPlatform. 2016-05-06 10:03:56
*/
package com.genius.BOSS.cdsy_v;

import java.io.IOException;
import java.sql.*;
import java.util.*;

import org.springframework.context.ApplicationContext;
import org.springframework.context.support.ClassPathXmlApplicationContext;

import org.apache.poi.hssf.usermodel.*;
import org.genius.data.*;
import org.genius.util.*;
import org.genius.power.Permission;

import com.lowagie.text.*;
import com.lowagie.text.pdf.BaseFont;
import com.genius.BOSS.cdsy_v.actionbean.*;

public class Cdsy_v implements ICdsy_v {

	public int totalSize;
	
	public int totalPageCount;

	public String selectSql;
	
	private String selectSumSql;
	
	private String sId;
	
	private final int pagerMaxSize = 200;
	
	public int getTotalSize() {
		return totalSize;
	}

	public void setTotalSize(int totalSize) {
		this.totalSize = totalSize;
	}
	
	public int getTotalPageCount(){
		return totalPageCount;
	}

	public String getSelectSql() {
		return selectSql;
	}

	public void setSelectSql(String selectSql) {
		this.selectSql = selectSql;
	}
	
	public String getSId() {
		return sId;
	}

	public void setSId(String sId) {
		this.sId=sId;
		
	}
	
	
	public ArrayList select(int pageNo, String orderField, String orderType, String searchField,String searchValue,String pager, String filter){
		boolean asc;
		ApplicationContext context = new ClassPathXmlApplicationContext(
				"applicationContext.xml");
		IPageDataConfig myData = (IPageDataConfig) context
				.getBean("pageDataConfigProxy");
		if(pager == null || pager.equals("on")){
			myData.init(50, pageNo);
		}else{
			myData.init(pagerMaxSize,pageNo);
		}
		ArrayList<SelectActionBean> myList=new ArrayList<SelectActionBean>();
		try {
			myData.openConnection();
			String sql ="select id,title,user_id,type,department,operate_state,open_state,score,academic,apply_state,create_user,create_time,audior_name,source,key_word,ucg from tb_material_ext";

			if (filter != null) {
				Permission permission = new Permission();
				sql = permission.filterSql(sql, filter);
			}

			Map<String,String> fieldType = new HashMap<String,String>();
			{
				fieldType.put("searchNone","None");
				fieldType.put("id","string");
				fieldType.put("title","string");
				fieldType.put("user_id","string");
				fieldType.put("type","string");
				fieldType.put("department","string");
				fieldType.put("operate_state","string");
				fieldType.put("open_state","string");
				fieldType.put("score","string");
				fieldType.put("academic","string");
				fieldType.put("apply_state","string");
				fieldType.put("create_user","string");
				fieldType.put("create_time","string");
				fieldType.put("audior_name","string");
				fieldType.put("source","string");
				fieldType.put("key_word","string");
				fieldType.put("ucg","string");
			}

			
			if (searchField!=null && searchField.equals("ADSsearchADS")) {
				sql = "select * from(" + sql + ") my_table where " + searchValue ;
			}else if (searchField != null && searchValue != null && !searchField.equals("null") && !searchValue.equals("null")) {
				if(fieldType.get(searchField)!="shortdate" && fieldType.get(searchField)!="longdate")
					sql = "select * from(" + sql + ") my_table where " + searchField + " like '%" + searchValue + "%'";
				else
					sql = "select * from(" + sql + ") my_table where convert(varchar(19)," + searchField + ",120) like '%" + searchValue + "%'";
			}

			if(orderField==null||orderField.equals("null")){
				orderField="id";
			}
			if(orderType==null||orderType.equals("null")){
				asc=false;
			}else if(orderType.equals("true")){
				asc=true;
			}else if(orderType.equals("false")){
				asc=false;
			}else{
				asc=false;
			}

			this.selectSumSql=sql;
			if (asc == true) {
				this.selectSql = "select * from(" + sql
						+ ") my_table_order order by  " + orderField + " asc";
			} else {
				this.selectSql = "select * from(" + sql
						+ ") my_table_order order by  " + orderField + " desc";
			}

			ResultSet rs=myData.executeQueryForSqlServer(sql, "id",orderField, asc );
			
			while(rs.next()){
				SelectActionBean cdsy_vBean=new SelectActionBean();
				
				cdsy_vBean.setId(rs.getString("id"));
				
				cdsy_vBean.setTitle(rs.getString("title"));
				
				cdsy_vBean.setUser_id(rs.getString("user_id"));
				
				cdsy_vBean.setType(rs.getString("type"));
				
				cdsy_vBean.setDepartment(rs.getString("department"));
				
				cdsy_vBean.setOperate_state(rs.getString("operate_state"));
				
				cdsy_vBean.setOpen_state(rs.getString("open_state"));
				
				cdsy_vBean.setScore(rs.getString("score"));
				
				cdsy_vBean.setAcademic(rs.getString("academic"));
				
				cdsy_vBean.setApply_state(rs.getString("apply_state"));
				
				cdsy_vBean.setCreate_user(rs.getString("create_user"));
				
				cdsy_vBean.setCreate_time(rs.getString("create_time"));
				
				cdsy_vBean.setAudior_name(rs.getString("audior_name"));
				
				cdsy_vBean.setSource(rs.getString("source"));
				
				cdsy_vBean.setKey_word(rs.getString("key_word"));
				
				cdsy_vBean.setUcg(rs.getString("ucg"));
				
				myList.add(cdsy_vBean);
				cdsy_vBean=null;
			}
			totalSize = myData.getTotalSize();
			totalPageCount = myData.getTotalPageCount();
			rs.close();
		} catch (SQLException e) {
			e.printStackTrace();
		 }finally{
			myData.closeConnection();
		}
		return myList;
	}
	
	
	public HSSFWorkbook selectExcelSelect() {
        HSSFWorkbook workbook = new HSSFWorkbook();

        HSSFSheet sheet = workbook.createSheet("sheet1");

        ApplicationContext context = new ClassPathXmlApplicationContext(
				"applicationContext.xml");
		IDataConfig config = (IDataConfig) context.getBean("dataConfigProxy");
		config.init();
        try {
            config.openConnection();
            String sql = this.selectSql;
			HSSFRow rowhead = sheet.createRow((short) 0);
						HSSFCell cellhead0 = rowhead.createCell((short) 0);
			cellhead0.setEncoding(HSSFCell.ENCODING_UTF_16);
			cellhead0.setCellValue("选择");
			HSSFCell cellhead1 = rowhead.createCell((short) 1);
			cellhead1.setEncoding(HSSFCell.ENCODING_UTF_16);
			cellhead1.setCellValue("标题");
			HSSFCell cellhead2 = rowhead.createCell((short) 2);
			cellhead2.setEncoding(HSSFCell.ENCODING_UTF_16);
			cellhead2.setCellValue("作者");
			HSSFCell cellhead3 = rowhead.createCell((short) 3);
			cellhead3.setEncoding(HSSFCell.ENCODING_UTF_16);
			cellhead3.setCellValue("资料类型");
			HSSFCell cellhead4 = rowhead.createCell((short) 4);
			cellhead4.setEncoding(HSSFCell.ENCODING_UTF_16);
			cellhead4.setCellValue("学科");
			HSSFCell cellhead5 = rowhead.createCell((short) 5);
			cellhead5.setEncoding(HSSFCell.ENCODING_UTF_16);
			cellhead5.setCellValue("操作状态");
			HSSFCell cellhead6 = rowhead.createCell((short) 6);
			cellhead6.setEncoding(HSSFCell.ENCODING_UTF_16);
			cellhead6.setCellValue("公开状态");
			HSSFCell cellhead7 = rowhead.createCell((short) 7);
			cellhead7.setEncoding(HSSFCell.ENCODING_UTF_16);
			cellhead7.setCellValue("分数");
			HSSFCell cellhead8 = rowhead.createCell((short) 8);
			cellhead8.setEncoding(HSSFCell.ENCODING_UTF_16);
			cellhead8.setCellValue("学术学分");
			HSSFCell cellhead9 = rowhead.createCell((short) 9);
			cellhead9.setEncoding(HSSFCell.ENCODING_UTF_16);
			cellhead9.setCellValue("学分申请状态");
			HSSFCell cellhead10 = rowhead.createCell((short) 10);
			cellhead10.setEncoding(HSSFCell.ENCODING_UTF_16);
			cellhead10.setCellValue("发布人");
			HSSFCell cellhead11 = rowhead.createCell((short) 11);
			cellhead11.setEncoding(HSSFCell.ENCODING_UTF_16);
			cellhead11.setCellValue("发布时间");
			HSSFCell cellhead12 = rowhead.createCell((short) 12);
			cellhead12.setEncoding(HSSFCell.ENCODING_UTF_16);
			cellhead12.setCellValue("联合作者");
			HSSFCell cellhead13 = rowhead.createCell((short) 13);
			cellhead13.setEncoding(HSSFCell.ENCODING_UTF_16);
			cellhead13.setCellValue("来源");
			HSSFCell cellhead14 = rowhead.createCell((short) 14);
			cellhead14.setEncoding(HSSFCell.ENCODING_UTF_16);
			cellhead14.setCellValue("关键字");
			HSSFCell cellhead15 = rowhead.createCell((short) 15);
			cellhead15.setEncoding(HSSFCell.ENCODING_UTF_16);
			cellhead15.setCellValue("UCG类型");

            ResultSet rs = config.executeQuery(sql);
            int i = 1;
            while (rs.next()) {
                HSSFRow row = sheet.createRow((short) i);
							HSSFCell cell0 = row.createCell((short) 0);
				cell0.setEncoding(HSSFCell.ENCODING_UTF_16);
				cell0.setCellValue(rs.getString("id"));
				HSSFCell cell1 = row.createCell((short) 1);
				cell1.setEncoding(HSSFCell.ENCODING_UTF_16);
				cell1.setCellValue(rs.getString("title"));
				HSSFCell cell2 = row.createCell((short) 2);
				cell2.setEncoding(HSSFCell.ENCODING_UTF_16);
				cell2.setCellValue(rs.getString("user_id"));
				HSSFCell cell3 = row.createCell((short) 3);
				cell3.setEncoding(HSSFCell.ENCODING_UTF_16);
				cell3.setCellValue(rs.getString("type"));
				HSSFCell cell4 = row.createCell((short) 4);
				cell4.setEncoding(HSSFCell.ENCODING_UTF_16);
				cell4.setCellValue(rs.getString("department"));
				HSSFCell cell5 = row.createCell((short) 5);
				cell5.setEncoding(HSSFCell.ENCODING_UTF_16);
				cell5.setCellValue(rs.getString("operate_state"));
				HSSFCell cell6 = row.createCell((short) 6);
				cell6.setEncoding(HSSFCell.ENCODING_UTF_16);
				cell6.setCellValue(rs.getString("open_state"));
				HSSFCell cell7 = row.createCell((short) 7);
				cell7.setEncoding(HSSFCell.ENCODING_UTF_16);
				cell7.setCellValue(rs.getString("score"));
				HSSFCell cell8 = row.createCell((short) 8);
				cell8.setEncoding(HSSFCell.ENCODING_UTF_16);
				cell8.setCellValue(rs.getString("academic"));
				HSSFCell cell9 = row.createCell((short) 9);
				cell9.setEncoding(HSSFCell.ENCODING_UTF_16);
				cell9.setCellValue(rs.getString("apply_state"));
				HSSFCell cell10 = row.createCell((short) 10);
				cell10.setEncoding(HSSFCell.ENCODING_UTF_16);
				cell10.setCellValue(rs.getString("create_user"));
				HSSFCell cell11 = row.createCell((short) 11);
				cell11.setEncoding(HSSFCell.ENCODING_UTF_16);
				cell11.setCellValue(rs.getString("create_time"));
				HSSFCell cell12 = row.createCell((short) 12);
				cell12.setEncoding(HSSFCell.ENCODING_UTF_16);
				cell12.setCellValue(rs.getString("audior_name"));
				HSSFCell cell13 = row.createCell((short) 13);
				cell13.setEncoding(HSSFCell.ENCODING_UTF_16);
				cell13.setCellValue(rs.getString("source"));
				HSSFCell cell14 = row.createCell((short) 14);
				cell14.setEncoding(HSSFCell.ENCODING_UTF_16);
				cell14.setCellValue(rs.getString("key_word"));
				HSSFCell cell15 = row.createCell((short) 15);
				cell15.setEncoding(HSSFCell.ENCODING_UTF_16);
				cell15.setCellValue(rs.getString("ucg"));

                i++;
            }

        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            config.closeConnection();
        }
        return workbook;
    }
    	
	public Table selectPdfSelect() {
        Table table = null;
        ApplicationContext context = new ClassPathXmlApplicationContext(
				"applicationContext.xml");
		IDataConfig config = (IDataConfig) context.getBean("dataConfigProxy");
		config.init();

        try {
            table = new Table(16);
            int width[] = { 6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6};
            table.setWidths(width);
            table.setWidth(80); 

            //table.setDefaultHorizontalAlignment(Element.ALIGN_LEFT);
            //table.setDefaultVerticalAlignment(Element.ALIGN_MIDDLE);
            table.setAutoFillEmptyCells(true);
            table.setPadding(1);
            table.setSpacing(0);
            //aTable.setDefaultCellBorder(0);
            table.setBorder(0);
            BaseFont bf = BaseFont.createFont("STSong-Light", "UniGB-UCS2-H",
                    false);
            Font font = new Font(bf, 12);

            config.openConnection();
            String sql = this.selectSql;
            ResultSet rs = config.executeQuery(sql);
            int i = 0;
            
			 table.addCell(new Cell(new Phrase("选择",font)));

			 table.addCell(new Cell(new Phrase("标题",font)));

			 table.addCell(new Cell(new Phrase("作者",font)));

			 table.addCell(new Cell(new Phrase("资料类型",font)));

			 table.addCell(new Cell(new Phrase("学科",font)));

			 table.addCell(new Cell(new Phrase("操作状态",font)));

			 table.addCell(new Cell(new Phrase("公开状态",font)));

			 table.addCell(new Cell(new Phrase("分数",font)));

			 table.addCell(new Cell(new Phrase("学术学分",font)));

			 table.addCell(new Cell(new Phrase("学分申请状态",font)));

			 table.addCell(new Cell(new Phrase("发布人",font)));

			 table.addCell(new Cell(new Phrase("发布时间",font)));

			 table.addCell(new Cell(new Phrase("联合作者",font)));

			 table.addCell(new Cell(new Phrase("来源",font)));

			 table.addCell(new Cell(new Phrase("关键字",font)));

			 table.addCell(new Cell(new Phrase("UCG类型",font)));

            while (rs.next()) {
    		
                table.addCell(new Cell(new Phrase(rs.getString("id"), font)));
			
                table.addCell(new Cell(new Phrase(rs.getString("title"), font)));
			
                table.addCell(new Cell(new Phrase(rs.getString("user_id"), font)));
			
                table.addCell(new Cell(new Phrase(rs.getString("type"), font)));
			
                table.addCell(new Cell(new Phrase(rs.getString("department"), font)));
			
                table.addCell(new Cell(new Phrase(rs.getString("operate_state"), font)));
			
                table.addCell(new Cell(new Phrase(rs.getString("open_state"), font)));
			
                table.addCell(new Cell(new Phrase(rs.getString("score"), font)));
			
                table.addCell(new Cell(new Phrase(rs.getString("academic"), font)));
			
                table.addCell(new Cell(new Phrase(rs.getString("apply_state"), font)));
			
                table.addCell(new Cell(new Phrase(rs.getString("create_user"), font)));
			
                table.addCell(new Cell(new Phrase(rs.getString("create_time"), font)));
			
                table.addCell(new Cell(new Phrase(rs.getString("audior_name"), font)));
			
                table.addCell(new Cell(new Phrase(rs.getString("source"), font)));
			
                table.addCell(new Cell(new Phrase(rs.getString("key_word"), font)));
			
                table.addCell(new Cell(new Phrase(rs.getString("ucg"), font)));
			
                i++;
            }
        } catch (BadElementException e) {

            e.printStackTrace();
        } catch (DocumentException e) {

            e.printStackTrace();
        } catch (IOException e) {

            e.printStackTrace();
        } catch (SQLException e) {

            e.printStackTrace();
        } finally {
            config.closeConnection();
        }

        return table;
    }
    
    	
	public Table selectWordSelect() {
        Table table = null;
        ApplicationContext context = new ClassPathXmlApplicationContext(
				"applicationContext.xml");
		IDataConfig config = (IDataConfig) context.getBean("dataConfigProxy");
		config.init();

        try {
            table = new Table(16);
            int width[] = { 6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6};
            table.setWidths(width);
            table.setWidth(80); 

            //table.setDefaultHorizontalAlignment(Element.ALIGN_LEFT);
            //table.setDefaultVerticalAlignment(Element.ALIGN_MIDDLE);
            table.setAutoFillEmptyCells(true);
            table.setPadding(1);
            table.setSpacing(0);
            //aTable.setDefaultCellBorder(0);
            table.setBorder(0);
            BaseFont bf = BaseFont.createFont("STSong-Light", "UniGB-UCS2-H",
                    false);
            Font font = new Font(bf, 12);

            config.openConnection();
            String sql = this.selectSql;
            ResultSet rs = config.executeQuery(sql);
            int i = 0;
            
			 table.addCell(new Cell(new Phrase("选择",font)));

			 table.addCell(new Cell(new Phrase("标题",font)));

			 table.addCell(new Cell(new Phrase("作者",font)));

			 table.addCell(new Cell(new Phrase("资料类型",font)));

			 table.addCell(new Cell(new Phrase("学科",font)));

			 table.addCell(new Cell(new Phrase("操作状态",font)));

			 table.addCell(new Cell(new Phrase("公开状态",font)));

			 table.addCell(new Cell(new Phrase("分数",font)));

			 table.addCell(new Cell(new Phrase("学术学分",font)));

			 table.addCell(new Cell(new Phrase("学分申请状态",font)));

			 table.addCell(new Cell(new Phrase("发布人",font)));

			 table.addCell(new Cell(new Phrase("发布时间",font)));

			 table.addCell(new Cell(new Phrase("联合作者",font)));

			 table.addCell(new Cell(new Phrase("来源",font)));

			 table.addCell(new Cell(new Phrase("关键字",font)));

			 table.addCell(new Cell(new Phrase("UCG类型",font)));

            while (rs.next()) {
    		
                table.addCell(new Cell(new Phrase(rs.getString("id"), font)));
			
                table.addCell(new Cell(new Phrase(rs.getString("title"), font)));
			
                table.addCell(new Cell(new Phrase(rs.getString("user_id"), font)));
			
                table.addCell(new Cell(new Phrase(rs.getString("type"), font)));
			
                table.addCell(new Cell(new Phrase(rs.getString("department"), font)));
			
                table.addCell(new Cell(new Phrase(rs.getString("operate_state"), font)));
			
                table.addCell(new Cell(new Phrase(rs.getString("open_state"), font)));
			
                table.addCell(new Cell(new Phrase(rs.getString("score"), font)));
			
                table.addCell(new Cell(new Phrase(rs.getString("academic"), font)));
			
                table.addCell(new Cell(new Phrase(rs.getString("apply_state"), font)));
			
                table.addCell(new Cell(new Phrase(rs.getString("create_user"), font)));
			
                table.addCell(new Cell(new Phrase(rs.getString("create_time"), font)));
			
                table.addCell(new Cell(new Phrase(rs.getString("audior_name"), font)));
			
                table.addCell(new Cell(new Phrase(rs.getString("source"), font)));
			
                table.addCell(new Cell(new Phrase(rs.getString("key_word"), font)));
			
                table.addCell(new Cell(new Phrase(rs.getString("ucg"), font)));
			
                i++;
            }
        } catch (BadElementException e) {

            e.printStackTrace();
        } catch (DocumentException e) {

            e.printStackTrace();
        } catch (IOException e) {

            e.printStackTrace();
        } catch (SQLException e) {

            e.printStackTrace();
        } finally {
            config.closeConnection();
        }

        return table;
    }
    
    
	public Map<String,String[]> getIndexModelInfo(){
		Map<String,String[]> infoMap = new HashMap<String,String[]>();
		String[] field;
			
		field = new String[]{"id","id","选择","checkbox","string"};	
		infoMap.put("id",field);
			
		field = new String[]{"title","title","标题","link","string"};	
		infoMap.put("title",field);
			
		field = new String[]{"user_id","user_id","作者","string","string"};	
		infoMap.put("user_id",field);
			
		field = new String[]{"type","type","资料类型","string","string"};	
		infoMap.put("type",field);
			
		field = new String[]{"department","department","学科","string","string"};	
		infoMap.put("department",field);
			
		field = new String[]{"operate_state","operate_state","操作状态","string","string"};	
		infoMap.put("operate_state",field);
			
		field = new String[]{"open_state","open_state","公开状态","string","string"};	
		infoMap.put("open_state",field);
			
		field = new String[]{"score","score","分数","string","string"};	
		infoMap.put("score",field);
			
		field = new String[]{"academic","academic","学术学分","string","string"};	
		infoMap.put("academic",field);
			
		field = new String[]{"apply_state","apply_state","学分申请状态","string","string"};	
		infoMap.put("apply_state",field);
			
		field = new String[]{"create_user","create_user","发布人","string","string"};	
		infoMap.put("create_user",field);
			
		field = new String[]{"create_time","create_time","发布时间","string","string"};	
		infoMap.put("create_time",field);
			
		field = new String[]{"audior_name","audior_name","联合作者","string","string"};	
		infoMap.put("audior_name",field);
			
		field = new String[]{"source","source","来源","string","string"};	
		infoMap.put("source",field);
			
		field = new String[]{"key_word","key_word","关键字","string","string"};	
		infoMap.put("key_word",field);
			
		field = new String[]{"ucg","ucg","UCG类型","string","string"};	
		infoMap.put("ucg",field);
	
		return infoMap;
	}



	public boolean insertNew(String source,String apply_state,String department,String create_time,String img_url,String operate_state,String user_id,String ucg,String open_state,String modify_user,String title,String audior_name,String modify_time,String attachment_id,String rank_type,String info,String academic,String content,String key_word,String cover_img,String score,String create_user,String type){
				if (info == null || info.length() <= 0) {
			info = " ";
		}

		if (content == null || content.length() <= 0) {
			content = " ";
		}


		boolean result=false;
		ApplicationContext context = new ClassPathXmlApplicationContext(
				"applicationContext.xml");
		IDataConfig myData = (IDataConfig) context.getBean("dataConfigProxy");
		myData.init();
		try {
			myData.openConnection();
			myData.beginTransaction();
			String sql1 ="insert into tb_material_ext (user_id,operate_state,open_state,score,type,academic,create_user,modify_time,modify_user,department,title,audior_name,create_time,source,info,key_word,content,img_url,ucg,apply_state,rank_type,cover_img,attachment_id) values ('" + user_id + "','" + operate_state + "','" + open_state + "','" + score + "','" + type + "','" + academic + "','" + create_user + "','" + modify_time + "','" + modify_user + "','" + department + "','" + title + "','" + audior_name + "','" + create_time + "','" + source + "','" + info + "','" + key_word + "','" + content + "','" + img_url + "','" + ucg + "','" + apply_state + "','" + rank_type + "','" + cover_img + "','" + attachment_id + "')";
			myData.addBatch(sql1);

			
			if(myData.commit()){
				result=true;
			}else{
				result=false;
			}
			
			myData.endTransaction();
			
		} catch (SQLException e) {
			e.printStackTrace();
		}finally{
			myData.closeConnection();
		}
		return result;
	}
	
	public ArrayList user_idInsertSelect() {
		ApplicationContext context = new ClassPathXmlApplicationContext(
				"applicationContext.xml");
		IDataConfig myData = (IDataConfig) context.getBean("dataConfigProxy");
		myData.init();
		ArrayList myList = new ArrayList();
		try {
			myData.openConnection();

			ResultSet rs = myData.executeQuery("select id,name from b_user where area like '%宜昌%'");
			while (rs.next()) {
				User_idActionBean user_idBean = new User_idActionBean();
				user_idBean.setId(rs.getString("id"));
				user_idBean.setName(rs.getString("name"));
				myList.add(user_idBean);
				user_idBean = null;
			}
			rs.close();
		} catch (SQLException e) {
			e.printStackTrace();
		} finally {
			myData.closeConnection();
		}
		return myList;
	}


	public ArrayList typeInsertSelect() {
		ApplicationContext context = new ClassPathXmlApplicationContext(
				"applicationContext.xml");
		IDataConfig myData = (IDataConfig) context.getBean("dataConfigProxy");
		myData.init();
		ArrayList myList = new ArrayList();
		try {
			myData.openConnection();

			ResultSet rs = myData.executeQuery("select code,name from b_dictionary where type = 'operate_state'");
			while (rs.next()) {
				TypeActionBean typeBean = new TypeActionBean();
				typeBean.setCode(rs.getString("code"));
				typeBean.setName(rs.getString("name"));
				myList.add(typeBean);
				typeBean = null;
			}
			rs.close();
		} catch (SQLException e) {
			e.printStackTrace();
		} finally {
			myData.closeConnection();
		}
		return myList;
	}


	public ArrayList departmentInsertSelect() {
		ApplicationContext context = new ClassPathXmlApplicationContext(
				"applicationContext.xml");
		IDataConfig myData = (IDataConfig) context.getBean("dataConfigProxy");
		myData.init();
		ArrayList myList = new ArrayList();
		try {
			myData.openConnection();

			ResultSet rs = myData.executeQuery("select code,name from b_dictionary where type = 'DEP_LIST'");
			while (rs.next()) {
				DepartmentActionBean departmentBean = new DepartmentActionBean();
				departmentBean.setCode(rs.getString("code"));
				departmentBean.setName(rs.getString("name"));
				myList.add(departmentBean);
				departmentBean = null;
			}
			rs.close();
		} catch (SQLException e) {
			e.printStackTrace();
		} finally {
			myData.closeConnection();
		}
		return myList;
	}


	public boolean insertEdit(String source,String apply_state,String department,String create_time,String img_url,String operate_state,String user_id,String ucg,String open_state,String modify_user,String title,String audior_name,String modify_time,String attachment_id,String rank_type,String info,String academic,String content,String key_word,String id,String cover_img,String score,String create_user,String type){
				if (info == null || info.length() <= 0) {
			info = " ";
		}

		if (content == null || content.length() <= 0) {
			content = " ";
		}


		boolean result=false;
		ApplicationContext context = new ClassPathXmlApplicationContext(
				"applicationContext.xml");
		IDataConfig myData = (IDataConfig) context.getBean("dataConfigProxy");
		myData.init();
		try {
			myData.openConnection();
			myData.beginTransaction();
			String sql1 ="update table set user_id='" + user_id + "',operate_state='" + operate_state + "',open_state='" + open_state + "',score='" + score + "',type='" + type + "',academic='" + academic + "',create_user='" + create_user + "',modify_time='" + modify_time + "',modify_user='" + modify_user + "',department='" + department + "',title='" + title + "',audior_name='" + audior_name + "',create_time='" + create_time + "',source='" + source + "',info='" + info + "',key_word='" + key_word + "',content='" + content + "',img_url='" + img_url + "',ucg='" + ucg + "',apply_state='" + apply_state + "',rank_type='" + rank_type + "',cover_img='" + cover_img + "',attachment_id='" + attachment_id + "' where id='" + id + "'";
			myData.addBatch(sql1);

			
			if(myData.commit()){
				result=true;
			}else{
				result=false;
			}
			
			myData.endTransaction();
			
		} catch (SQLException e) {
			e.printStackTrace();
		}finally{
			myData.closeConnection();
		}
		return result;
	}
		
	public InsertActionBean insertSelectEdit(String id) {
		InsertActionBean bean = new InsertActionBean();
        ApplicationContext context = new ClassPathXmlApplicationContext(
				"applicationContext.xml");
		IDataConfig myData = (IDataConfig) context.getBean("dataConfigProxy");
		myData.init();
        try {
            myData.openConnection();
            String sql="select id,user_id,operate_state,open_state,score,type,academic,create_user,modify_time,modify_user,department,title,audior_name,create_time,source,info,key_word,content,img_url,ucg,apply_state,rank_type,cover_img,attachment_id from table where id='" + id + "'";
            ResultSet rs = myData
                    .executeQuery(sql);
            while (rs.next()) {
				bean.setUser_id(rs.getString("user_id"));
				bean.setOperate_state(rs.getString("operate_state"));
				bean.setOpen_state(rs.getString("open_state"));
				bean.setScore(rs.getString("score"));
				bean.setType(rs.getString("type"));
				bean.setAcademic(rs.getString("academic"));
				bean.setCreate_user(rs.getString("create_user"));
				bean.setModify_time(rs.getString("modify_time"));
				bean.setModify_user(rs.getString("modify_user"));
				bean.setDepartment(rs.getString("department"));
				bean.setTitle(rs.getString("title"));
				bean.setAudior_name(rs.getString("audior_name"));
				bean.setCreate_time(rs.getString("create_time"));
				bean.setSource(rs.getString("source"));
				bean.setInfo(rs.getString("info"));
				bean.setKey_word(rs.getString("key_word"));
				bean.setContent(rs.getString("content"));
				bean.setImg_url(rs.getString("img_url"));
				bean.setUcg(rs.getString("ucg"));
				bean.setApply_state(rs.getString("apply_state"));
				bean.setRank_type(rs.getString("rank_type"));
				bean.setCover_img(rs.getString("cover_img"));
				bean.setAttachment_id(rs.getString("attachment_id"));

            }
        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            myData.closeConnection();
        }
        return bean;
    }
    

	
	public boolean delete(String[] id){
		boolean result=false;
		ApplicationContext context = new ClassPathXmlApplicationContext(
				"applicationContext.xml");
		IDataConfig myData = (IDataConfig) context.getBean("dataConfigProxy");
		myData.init();
		try {
			myData.openConnection();
			myData.beginTransaction();
			for(int i=0;i<id.length;i++){
		
				myData.addBatch("delete from  tb_material_ext where  id ='"+id[i]+"'");
		
			}
			
			if(myData.commit()){
				result=true;
			}else{
				result=false;
			}
			
			myData.endTransaction();
			
		} catch (SQLException e) {
			e.printStackTrace();
		}finally{
			myData.closeConnection();
		}
		return result;
	}
	}

